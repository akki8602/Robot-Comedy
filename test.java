import java.io.*;
import java.net.Socket;

/*
 * Demo Simple CmdUtil Client
 *  this application is a demonstration of how to connect to the robot and send/read data.
 *  It will use a command sender thread, and a receiver thread.  This is not a lesson in
 *  multi-threading so be aware that production applications need to add additional checking for
 *  connection issues, blocking variable modification, and handling errors that arise from concurrent
 *  modification.
 *
 *     Author: Jack Morrison
 *  Revisions: 02/27/2020 - Initial Project - JKM
*
 *  Copyright: (C)2020 Robokind, LLC.
 ****************************************************************************************************** */
public class test {

    public static boolean running = true; //Set to false to shut down threads.

    //Method Generated by Gradle's Template.  I'm keeping it so the Tests still function.
    public String getGreeting() {
        return "I am a CmdUtil Client Demo";
    }
    public static void main(String[] args) {
        System.out.println(new test().getGreeting());
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    System.out.println(System.lineSeparator() + "Stopping all threads.");
                    //Put all your shutdown code here, set flags for threads so they stop gracefully
                    // this will also be where you might clean up files, or other actions like force disconnections.
                    test.running = false;

                    //Sleep long enough for everything to shut down gracefully.
                    Thread.sleep(1000);
                    System.out.println("Stopped all threads.");
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }, "StemClientShutdown"));

        //Escape your static life.
        new test().I_Start_Here(args);
    }

    /**
     * Main thread,  This is not a static instance as to avoid anomalous behavior when trying work with threads.
     * @param args Pass the args sent from the main class invoked on startup.
     */
    public void I_Start_Here(String[] args) {
        System.out.println("Starting");
        //Set up connection so input and output to the TCP connection can happen at the same time there is user input.
        //spawn tcp receiver thread
        //spawn tcp sender thread
        try{
            Socket socket = new Socket("100.64.235.149", 4001);
            OutputStream socketOutput = socket.getOutputStream();
            InputStream socketInput = socket.getInputStream();

            Thread userOutput = new Thread(){
                public void run(){
                    BufferedReader reader = new BufferedReader(new InputStreamReader(socketInput));

                    while(running){
                        try {
                            String sInp = reader.readLine();
                            if (sInp != null && sInp.length() > 0) {
                                System.out.println(sInp);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            userOutput.start();

            Thread userInput = new Thread(){
                public void run(){
                    try {
                        BufferedReader reader = null;
                        try {
                                reader = new BufferedReader(new InputStreamReader(System.in));
                        } catch(Exception ex){
                            ex.printStackTrace();
                        }
                        while(test.running) {
                            String sInp = reader.readLine();

                            //System.out.println("Internal Commands = " + inp[0]);

                            if (sInp != null && sInp.length() > 0) {
                                System.out.println("Command = " + sInp);
                                if (sInp.startsWith("#") || sInp.startsWith("//")) {
                                    System.out.println("Ignored -> " + sInp);
                                    sInp = "";
                                }

                                if (sInp.toLowerCase().startsWith(".x") )//Disregard this command if running as a pipe daemon.
                                {
                                    System.out.println("Abandon Ye all Hope!");
                                    test.running = false;
                                }

                                if (sInp.equalsIgnoreCase("hello") )//Disregard this command if running as a pipe daemon.
                                { //It is preferred to break each one of these commands into separate sends,  eventually you will run out of buffer.
                                    sInp = "expression smile\n";
                                    sInp += "mouthposition noled\n";
                                    sInp += "led 100 0 0 0 0\n";
                                    sInp += "speak I am a Robo kind Robot\n";
                                }

                                socketOutput.write((sInp + "\n").getBytes());

                            } else {
                                Thread.sleep(1000);
                            }
                        }
                        System.out.println("Abandon Ye all Hope! I'm Done!");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
            userInput.start();

            while(running) try {
                //User Input Here
                //System.out.print(".");
                Thread.sleep(2000);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            socket.close();
        } catch (Exception ex){
            ex.printStackTrace();
        }
    }
}
